# -*- coding: utf-8 -*-
"""PRUEBA DE PROYECTO IV.

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CTm1WjbSLV_exEvtgB7k7R5lNypsSrs1
"""



import pandas as pd
import dash
from dash import dcc, html
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
from dash.dependencies import Input, Output

file_name = "PROYECTO IV DATA RECURSOS FEDERALES.xlsx"

df = pd.read_excel('PROYECTO IV DATA RECURSOS FEDERALES.xlsx')

df_aportaciones = pd.read_excel(file_name,sheet_name='Aportaciones y recursos federal')
df_participaciones = pd.read_excel(file_name,sheet_name='Participaciones')
df_general = pd.read_excel(file_name, sheet_name= 'General')
df_descentralizacion = pd.read_excel(file_name, sheet_name= 'Descentralización')
df_dispersion = df_aportaciones[['CICLO', 'TRIMESTRE', 'DESC_PARTIDA_GENERICA', 'MONTO_MODIFICADO', 'MONTO_EJERCIDO', 'INSTITUCION_EJECUTORA']]


ciclos = df_dispersion['CICLO'].unique()
trimestres = df_dispersion['TRIMESTRE'].unique()


primary_color = "#b71208"  # Participaciones
secondary_color = "#cb8c3c"  # Aportaciones
tertiary_color = "#357d28"  # Convenios de Descentralización
highlight_color = "#f8a832"  # Correlación: Monto Asignado y Monto Ejercido
background_color = "#15490f"  # Fondo de la plataforma
frame_color = "#0d2d09"  # Color para el borde de los gráficos
font_color = "#ffffff"  # Color de las letras (blanco)
title_color = "#c37d1d"  # Título con el color deseado

# Crear la lista de años únicos del DataFrame 'df_participaciones'
años_participaciones = df_participaciones['AÑO'].unique()

# Crear la lista de años únicos del DataFrame 'df_aportaciones'
años_aportaciones = df_aportaciones['CICLO'].unique()




# Limpieza de nombres de columnas (para evitar espacios extra o saltos de línea)
df_participaciones.columns = df_participaciones.columns.str.strip()

años = df_aportaciones['CICLO'].unique()





# Lista de fondos que deben coincidir con las columnas del DataFrame
fondos = [
    "FONDO GENERAL\nDE PARTICIPACIONES", "FONDO DE FOMENTO\nMUNICIPAL", "IMPUESTO SOBRE AUTOMOVILES\nNUEVOS",
    "IMPUESTO ESPECIAL SOBRE PRODUCCIÓN Y SERVICIOS", "FONDO DE FISCALIZACIÓN Y RECAUDACIÓN",
    "FONDO DE COMPENSACIÓN  DEL IMPUESTO SOBRE AUTOMÓVILES NUEVOS", "DIFERENCIAS DEL FONDO DE FISCALIZACIÓN Y RECAUDACIÓN",
    "ART. 4o. A, FRACCIÓN I DE LA LEY DE COORDINACIÓN FISCAL (GASOLINA)", "FONDO ISR",
    "ISR ENAJENACIÓN INMUEBLES", "PARTICIPACIONES FOCO-GASOLINA", "PARTICIPACIONES DE\nGASOLINA Y DIESEL",
    "F.G.P.", "FEIEF-FOFIR", "F.F.M",
    "ACCESORIOS DE IMPUESTO SOBRE AUTÓMOVILES NUEVOS ENERO-NOVIEMBRE"
]

# Verificar las columnas para asegurar que todos los fondos existan en el DataFrame
missing_columns = [col for col in fondos if col not in df_participaciones.columns]
if missing_columns:
    print(f"Las siguientes columnas están faltando en el DataFrame: {missing_columns}")
else:
    # Transformación a formato largo
    df_long = df_participaciones.melt(id_vars=['AÑO', 'MUNICIPIO', 'TRIMESTRE'], value_vars=fondos, var_name='Fondo', value_name='Monto')

    # Agrupación de datos por año, trimestre, fondo y municipio
    df_agrupado = df_long.groupby(['AÑO', 'TRIMESTRE', 'Fondo', 'MUNICIPIO'])['Monto'].sum().reset_index()


# Inicializar la app
app = dash.Dash(__name__)
server = app.server

# Colores definidos
primary_color = "#fba725"  # Color principal (amarillo)
secondary_color = "#307d24"  # Color secundario (verde)
tertiary_color = "#9d6b31"  # Color terciario (marrón)
background_color = "#0c2d09"  # Fondo verde más oscuro

# Limpieza de nombres de columnas (para evitar espacios extra o saltos de línea)
df_participaciones.columns = df_participaciones.columns.str.strip()



# Lista de fondos que deben coincidir con las columnas del DataFrame
fondos = [
    "FONDO GENERAL\nDE PARTICIPACIONES", "FONDO DE FOMENTO\nMUNICIPAL", "IMPUESTO SOBRE AUTOMOVILES\nNUEVOS",
    "IMPUESTO ESPECIAL SOBRE PRODUCCIÓN Y SERVICIOS", "FONDO DE FISCALIZACIÓN Y RECAUDACIÓN",
    "FONDO DE COMPENSACIÓN  DEL IMPUESTO SOBRE AUTOMÓVILES NUEVOS", "DIFERENCIAS DEL FONDO DE FISCALIZACIÓN Y RECAUDACIÓN",
    "ART. 4o. A, FRACCIÓN I DE LA LEY DE COORDINACIÓN FISCAL (GASOLINA)", "FONDO ISR",
    "ISR ENAJENACIÓN INMUEBLES", "PARTICIPACIONES FOCO-GASOLINA", "PARTICIPACIONES DE\nGASOLINA Y DIESEL",
    "F.G.P.", "FEIEF-FOFIR", "F.F.M",
    "ACCESORIOS DE IMPUESTO SOBRE AUTÓMOVILES NUEVOS ENERO-NOVIEMBRE"
]

# Verificar las columnas para asegurar que todos los fondos existan en el DataFrame
missing_columns = [col for col in fondos if col not in df_participaciones.columns]
if missing_columns:
    print(f"Las siguientes columnas están faltando en el DataFrame: {missing_columns}")
else:
    # Transformación a formato largo
    df_long = df_participaciones.melt(id_vars=['AÑO', 'MUNICIPIO', 'TRIMESTRE'], value_vars=fondos, var_name='Fondo', value_name='Monto')

    # Agrupación de datos por año, trimestre, fondo y municipio
    df_agrupado = df_long.groupby(['AÑO', 'TRIMESTRE', 'Fondo', 'MUNICIPIO'])['Monto'].sum().reset_index()

# Crear la lista de años únicos del DataFrame
años = df_aportaciones['CICLO'].unique()

# Calcular el total de cada categoría (general)
total_participaciones = df_general['PARTICIPACIONES'].sum()
total_aportaciones = df_general['APORTACIONES'].sum()
total_convenios = df_general['CONVENIOS DE DESCENTRALIZACIÓN '].sum()

# Crear una lista con los totales para cada categoría
totales = [total_participaciones, total_aportaciones, total_convenios]

# Crear una lista con los nombres de las categorías
categorias = ['Participaciones', 'Aportaciones', 'Convenios de Descentralización']

df_descentralizacion = pd.DataFrame({
    'AÑO': [2020, 2020, 2020, 2020, 2020, 2021, 2021, 2021, 2021, 2022, 2023, 2023, 2024, 2024],
    'RAMO': ['Gobernación', 'Gobernación', 'Agricultura y Desarrollo Rural', 'Educación Pública', 'Educación Pública',
             'Gobernación', 'Gobernación', 'Agricultura y Desarrollo Rural', 'Educación Pública', 'Educación Pública',
             'Gobernación', 'Gobernación', 'Agricultura y Desarrollo Rural', 'Educación Pública'],
    'PROGRAMA PRESUPUESTARIO': ['Registro e Identificación de Población', 'Subsidios para las acciones de búsqueda de Personas',
                               'Programa de Concurrencia con las Entidades Federativas', 'Educación para Adultos (INEA)',
                               'Escuelas de Tiempo Completo', 'Registro e Identificación de Población', 'Subsidios para las acciones de búsqueda de Personas',
                               'Programa de Concurrencia con las Entidades Federativas', 'Educación para Adultos (INEA)', 'Escuelas de Tiempo Completo',
                               'Registro e Identificación de Población', 'Subsidios para las acciones de búsqueda de Personas',
                               'Programa de Concurrencia con las Entidades Federativas', 'Educación para Adultos (INEA)'],
    'TIPO DE GASTO': ['Gasto corriente', 'Gasto de Inversión', 'Gasto de Inversión', 'Gasto corriente', 'Gasto corriente',
                      'Gasto corriente', 'Gasto de Inversión', 'Gasto de Inversión', 'Gasto corriente', 'Gasto corriente',
                      'Gasto corriente', 'Gasto de Inversión', 'Gasto de Inversión', 'Gasto corriente'],
    'PARTIDA GÉNERICA': ['Servicios profesionales, científicos y técnicos', 'Muebles de oficina y estantería',
                         'Subsidios a la inversión', 'Subsidios a Entidades Federativas y Municipios',
                         'Servicios integrales y otros servicios', 'Servicios profesionales, científicos y técnicos',
                         'Muebles de oficina y estantería', 'Subsidios a la inversión', 'Subsidios a Entidades Federativas y Municipios',
                         'Servicios integrales y otros servicios', 'Servicios profesionales, científicos y técnicos',
                         'Muebles de oficina y estantería', 'Subsidios a la inversión', 'Subsidios a Entidades Federativas y Municipios'],
    'MONTO': [996046.0, 10627625.0, 0.0, 3672564.0, 119032512.0, 500000.0, 2000000.0, 0.0, 4500000.0, 12000000.0,
              2000000.0, 2500000.0, 3000000.0, 5000000.0]  # Asegúrate de tener valores en MONTO para los años 2023 y 2024
})

# Filtrar los datos para eliminar los valores de MONTO igual a cero
df_descentralizacion = df_descentralizacion[df_descentralizacion['MONTO'] > 0]

# Crear el gráfico de pastel
fig_pastel = go.Figure(data=[go.Pie(labels=categorias, values=totales, hole=0.3)])

# Personalizar el gráfico de pastel
fig_pastel.update_layout(
    title='Distribución Total de Participaciones, Aportaciones y Convenios de Descentralización',
    template='plotly_dark',  # Estilo visual del gráfico
    font=dict(family="Arial, sans-serif", size=14),
    plot_bgcolor=background_color,  # Color de fondo para los gráficos
    paper_bgcolor=background_color,  # Color de fondo del lienzo del gráfico
)

# Crear el gráfico de líneas
fig_lines = go.Figure()


fig_linea = go.Figure()
fig_linea.add_trace(go.Scatter(x=df_general['AÑO'], y=df_general['PARTICIPACIONES'], mode='lines', name='Participaciones', line=dict(color=primary_color)))
fig_linea.add_trace(go.Scatter(x=df_general['AÑO'], y=df_general['APORTACIONES'], mode='lines', name='Aportaciones', line=dict(color=secondary_color)))
fig_linea.add_trace(go.Scatter(x=df_general['AÑO'], y=df_general['CONVENIOS DE DESCENTRALIZACIÓN '], mode='lines', name='Convenios de Descentralización', line=dict(color=tertiary_color)))
fig_linea.update_layout(
    title='Evolución de las Participaciones, Aportaciones y Convenios de Descentralización',
    xaxis_title='Año',
    yaxis_title='Valor',
    template='plotly_dark',
    font=dict(family="Arial, sans-serif", size=14, color=font_color),
    plot_bgcolor=background_color,
    paper_bgcolor=background_color
)

# Personalizar el gráfico de líneas
fig_lines.update_layout(
    title='Evolución de las Participaciones, Aportaciones y Convenios de Descentralización (2020-2024)',
    xaxis_title='Año',
    yaxis_title='Valor',
    template='plotly_dark',  # Estilo visual del gráfico
    font=dict(family="Arial, sans-serif", size=14),
    plot_bgcolor=background_color,  # Color de fondo para los gráficos
    paper_bgcolor=background_color,  # Color de fondo del lienzo del gráfico
)




# Crear el gráfico de Fondos por Municipio
fig_fondos = px.bar(df_long,
                    x='Fondo',
                    y='Monto',
                    color='MUNICIPIO',
                    barmode='stack',
                    facet_col='AÑO',
                    facet_col_wrap=4,
                    height=600,
                    labels={'Monto': 'Monto asignado', 'Fondo': 'Fondo'},
                    title="Distribución de los fondos por municipio")

# Ajustar formato de hover a moneda y mostrar el nombre del municipio
fig_fondos.update_traces(hovertemplate='%{y:$,.2f}<br>MUNICIPIO: %{customdata[0]}<br>Fondo: %{x}',
                         customdata=df_long[['MUNICIPIO']].values)

# Interactividad de la leyenda
fig_fondos.for_each_trace(lambda trace: trace.update(legendgroup=str(trace.name)))

# Cambiar el color de fondo del gráfico a verde #216918
fig_fondos.update_layout(
    plot_bgcolor='#216918',  # Color de fondo de las gráficas
    paper_bgcolor='#216918',  # Fondo de la página
)

def crear_figura(df_filtrado):
    fig_dispersion = px.scatter(df_filtrado,
                                x='MONTO_MODIFICADO',
                                y='MONTO_EJERCIDO',
                                hover_data={
                                    'INSTITUCION_EJECUTORA': True,
                                    'DESC_PARTIDA_GENERICA': True,
                                    'MONTO_MODIFICADO': True,  # Mostrar en el hover
                                    'MONTO_EJERCIDO': True  # Mostrar en el hover
                                },
                                labels={
                                    'MONTO_MODIFICADO': 'Monto Asignado',
                                    'MONTO_EJERCIDO': 'Monto Ejercido',
                                    'INSTITUCION_EJECUTORA': 'Institución',
                                    'DESC_PARTIDA_GENERICA': 'Partida'
                                },
                                title="Correlación entre Monto Asignado y Monto Ejercido"
    )
    fig_dispersion.update_layout(
        template='plotly_dark',  # Estilo visual del gráfico
        font=dict(family="Arial, sans-serif", size=14),
        plot_bgcolor="#176011",  # Color de fondo para los gráficos
        paper_bgcolor="#176011",  # Fondo de la página
    )
    return fig_dispersion

fig_treemap = px.treemap(
    df_descentralizacion,
    path=[px.Constant("Total"), 'RAMO', 'PROGRAMA PRESUPUESTARIO', 'PARTIDA GÉNERICA'],  # Jerarquía de los niveles
    values='MONTO',  # Tamaño de los bloques por 'MONTO'
    hover_data={'TIPO DE GASTO': True, 'PARTIDA GÉNERICA': True},  # Datos en el hover
    title='Distribución de los Convenios de Descentralización',
    color='MONTO',  # Colorear bloques según el monto
    color_continuous_scale='RdBu'  # Escala de colores
)



    # Ajustes visuales del gráfico
fig_treemap.update_layout(
        template='plotly_dark',
        font=dict(family="Arial, sans-serif", size=14),
        plot_bgcolor="#176011",
        paper_bgcolor="#176011",
    )




# Layout de la aplicación
app.layout = html.Div(style={"backgroundColor": background_color, "padding": "20px"}, children=[

                                                                                                    # Título de la plataforma
    html.H1(
        "PLATAFORMA DE RECURSOS FEDERALES DEL GOBIERNO DEL ESTADO DE MORELOS",
        style={
            "textAlign": "center",
            "color": primary_color,
            "fontSize": 32,
            "fontWeight": "bold",
            "fontFamily": "Arial, sans-serif"
        }
    ),

    # Subtítulo
    html.H2("Consulta los datos del destino del gasto de las aportaciones, participaciones y convenios de descentralización.", style={
        "textAlign": "center", "color": font_color, "fontSize": 20, "fontFamily": "Arial, sans-serif", "fontWeight": "normal"
    }),


                                                                                                    # Texto explicativo
    html.Div([
        html.P(
            "Participaciones federales",
            style={
                "fontSize": 18,
                "color": "white",
                "fontWeight": "bold",
                "fontFamily": "Arial, sans-serif"
            }
        ),
        html.P(
            "Son recursos que los estados y municipios pueden ejercer libremente. Se obtienen por la adhesión al Sistema Nacional de Coordinación Fiscal y por el rendimiento de las contribuciones especiales.",
            style={
                "fontSize": 16,
                "color": "white",
                "fontFamily": "Arial, sans-serif",
                "marginBottom": "20px"
            }
        ),
        html.P(
            "Aportaciones federales",
            style={
                "fontSize": 18,
                "color": "white",
                "fontWeight": "bold",
                "fontFamily": "Arial, sans-serif"
            }
        ),
        html.P(
            "Son recursos que la Federación determina en qué se deben gastar. Se transfieren a través del Ramo 33, Aportaciones Federales para Entidades Federativas y Municipios. Los recursos se destinan a fortalecer la capacidad de respuesta de los estados y municipios en rubros como educación, salud, infraestructura, seguridad pública, programas alimenticios y de asistencia social.",
            style={
                "fontSize": 16,
                "color": "white",
                "fontFamily": "Arial, sans-serif",
                "marginBottom": "20px"
            }
        ),
        html.P(
            "Convenios de Descentralización",
            style={
                "fontSize": 18,
                "color": "white",
                "fontWeight": "bold",
                "fontFamily": "Arial, sans-serif"
            }
        ),
        html.P(
            "Son aquellas asignaciones destinadas a los convenios que celebran los Entes Públicos con el propósito de descentralizar la ejecución de funciones, programas o proyectos federales y, en su caso, recursos humanos o materiales.",
            style={
                "fontSize": 16,
                "color": "white",
                "fontFamily": "Arial, sans-serif"
            }
        ),
    ], style={"textAlign": "center", "marginBottom": "40px"}),

    # Gráfico de Línea
    html.Div([dcc.Graph(id="grafico-lineas", figure=fig_linea)], style={'border': f'2px solid {frame_color}', 'padding': '10px', 'margin-bottom': '20px'}),

    # Gráfico de Pastel
    html.Div([html.Label("Selecciona un año para el gráfico de pastel:"),
              dcc.Dropdown(id="year-dropdown", options=[{"label": str(año), "value": año} for año in df_general['AÑO'].unique()], value=2020),
              dcc.Graph(id="pie-chart")],
             style={'border': f'2px solid {frame_color}', 'padding': '10px', 'margin-bottom': '20px'}),

    # Gráfico de Aportaciones Federales por Municipio
    html.Div([html.Label("Selecciona un ciclo para el gráfico de Aportaciones:"),
              dcc.Dropdown(id="dropdown-ciclo-aportaciones", options=[{"label": str(ciclo), "value": ciclo} for ciclo in df_aportaciones['CICLO'].unique()], value=2020),
              dcc.Graph(id="grafico-aportaciones")],
             style={'border': f'2px solid {frame_color}', 'padding': '10px', 'margin-bottom': '20px'}),

    # Gráfico de Participaciones Federales por Municipio
    html.Div([html.Label("Selecciona un año para el gráfico de Participaciones:"),
              dcc.Dropdown(id="dropdown-año-participaciones", options=[{"label": str(año), "value": año} for año in df_participaciones['AÑO'].unique()], value=2020),
              dcc.Graph(id="grafico-participaciones")],
             style={'border': f'2px solid {frame_color}', 'padding': '10px', 'margin-bottom': '20px'}),

    # Gráfico de Fondos por Municipio
    html.Div([html.Label("Selecciona un ciclo para el gráfico de Fondos:"),
              dcc.Dropdown(id="dropdown-año", options=[{"label": str(año), "value": año} for año in df_long['AÑO'].unique()], value=2020),
              html.Label("Selecciona los municipios para el gráfico de Fondos:"),
              dcc.Dropdown(id="dropdown-municipio", options=[{"label": municipio, "value": municipio} for municipio in df_long['MUNICIPIO'].unique()], multi=True),
              dcc.Graph(id="grafico-fondos")],
             style={'border': f'2px solid {frame_color}', 'padding': '10px', 'margin-bottom': '20px'}),

    # Gráfico de Correlación entre Monto Asignado y Monto Ejercido
    html.Div([html.Label("Selecciona un ciclo para el gráfico de Correlación:"),
              dcc.Dropdown(id="dropdown-ciclo-correlacion", options=[{"label": str(ciclo), "value": ciclo} for ciclo in df_aportaciones['CICLO'].unique()], value=2020),
              dcc.Graph(id="grafico-correlacion")],
             style={'border': f'2px solid {frame_color}', 'padding': '10px', 'margin-bottom': '20px'}),

    # Gráfico Treemap de los Convenios de Descentralización
    html.Div([html.Label("Selecciona un año para el gráfico de Treemap:"),
              dcc.Dropdown(id="dropdown-año-treemap", options=[{"label": str(año), "value": año} for año in df_descentralizacion['AÑO'].unique()], value=2020),
              dcc.Graph(id="treemap-chart")],
             style={'border': f'2px solid {frame_color}', 'padding': '10px', 'margin-bottom': '20px'}),

      # Fuentes de datos
    html.Div([html.P("Fuentes de datos:", style={'textAlign': 'center', 'color': font_color, 'fontSize': 16}),
              html.P("https://www.hacienda.morelos.gob.mx/index.php/transparencia/participacion-a-municipios", style={'textAlign': 'center', 'color': font_color, 'fontSize': 16}),
              html.P("https://www.transparenciapresupuestaria.gob.mx/Datos-Abiertos", style={'textAlign': 'center', 'color': font_color, 'fontSize': 16})],
             style={'padding': '20px', 'backgroundColor': background_color}),

    # Créditos
    html.Div([html.P("Diseño y elaboración Lic.C.Pol. Eduardo Cabrera Gutiérrez", style={'textAlign': 'center', 'color': font_color}),
              html.P("cabardo.gutz@gmail.com", style={'textAlign': 'center', 'color': font_color})],
             style={'padding': '20px', 'backgroundColor': background_color})

])

# Gráfico de Pastel: Distribución Total de Participaciones, Aportaciones y Convenios de Descentralización
@app.callback(
    Output('pie-chart', 'figure'),
    [Input('year-dropdown', 'value')]
)
def update_pie_chart(selected_year):
    df_filtered = df_general[df_general['AÑO'] == selected_year]
    total_participaciones = df_filtered['PARTICIPACIONES'].sum()
    total_aportaciones = df_filtered['APORTACIONES'].sum()
    total_convenios = df_filtered['CONVENIOS DE DESCENTRALIZACIÓN '].sum()
    totales = [total_participaciones, total_aportaciones, total_convenios]
    fig_pastel = go.Figure(data=[go.Pie(labels=['Participaciones', 'Aportaciones', 'Convenios de Descentralización'], values=totales, hole=0.3,
                                        marker=dict(colors=[primary_color, secondary_color, tertiary_color]))])
    fig_pastel.update_layout(
        title=f'Distribución Total de Participaciones, Aportaciones y Convenios de Descentralización ({selected_year})',
        template='plotly_dark',
        font=dict(family="Arial, sans-serif", size=14, color=font_color),
        plot_bgcolor=background_color,
        paper_bgcolor=background_color
    )
    return fig_pastel

# Gráfico de Barras Laterales: Aportaciones Federales por Municipio para el Año 2020
@app.callback(
    Output('grafico-aportaciones', 'figure'),
    [Input('dropdown-ciclo-aportaciones', 'value')]
)
def actualizar_grafico_aportaciones(ciclo_seleccionado):
    df_filtrado = df_aportaciones[(df_aportaciones['CICLO'] == ciclo_seleccionado)]
    if 'MUNICIPIO' in df_filtrado.columns:
        df_filtrado = df_filtrado[df_filtrado['MUNICIPIO'] != "Gobierno de la Entidad"]
        df_agrupado = df_filtrado.groupby('MUNICIPIO')['MONTO_MODIFICADO'].sum().reset_index()
        fig = px.bar(df_agrupado, y="MUNICIPIO", x="MONTO_MODIFICADO", orientation="h", title=f"Aportaciones por Municipio para el ciclo {ciclo_seleccionado}")
        fig.update_layout(
            xaxis_title="Monto Aprobado",
            yaxis_title="Municipio",
            showlegend=False,
            font=dict(family="Arial, sans-serif", size=14, color=font_color),
            plot_bgcolor=background_color,
            paper_bgcolor=background_color,
            margin=dict(l=40, r=40, t=40, b=40)
        )
        fig.update_traces(marker_color=secondary_color)
    else:
        fig = go.Figure()
    return fig

# Gráfico de Barras Laterales: Participaciones Federales por Municipio para el Año 2020
@app.callback(
    Output('grafico-participaciones', 'figure'),
    [Input('dropdown-año-participaciones', 'value')]
)
def actualizar_grafico_participaciones(año_seleccionado):
    df_filtrado = df_participaciones[df_participaciones['AÑO'] == año_seleccionado]
    df_agrupado = df_filtrado.groupby('MUNICIPIO')['TOTAL'].sum().reset_index()
    fig_participaciones = px.bar(df_agrupado, y="MUNICIPIO", x="TOTAL", orientation="h", title=f"Participaciones Federales por Municipio para el año {año_seleccionado}")
    fig_participaciones.update_layout(
        xaxis_title="Monto Total de Participaciones",
        yaxis_title="Municipio",
        showlegend=False,
        font=dict(family="Arial, sans-serif", size=14, color=font_color),
        plot_bgcolor=background_color,
        paper_bgcolor=background_color,
        margin=dict(l=40, r=40, t=40, b=40)
    )
    fig_participaciones.update_traces(marker_color=primary_color)
    return fig_participaciones

# Gráfico de Fondos por Municipio
@app.callback(
    Output('grafico-fondos', 'figure'),
    [Input('dropdown-año', 'value'), Input('dropdown-municipio', 'value')]
)
def actualizar_grafico_fondos(año_seleccionado, municipios_seleccionados):
    df_filtrado = df_long[df_long['AÑO'] == año_seleccionado]
    if municipios_seleccionados:
        df_filtrado = df_filtrado[df_filtrado['MUNICIPIO'].isin(municipios_seleccionados)]
    fig = px.bar(
        df_filtrado,
        x='Fondo',
        y='Monto',
        color='MUNICIPIO',
        barmode='stack',
        facet_col='AÑO',
        facet_col_wrap=4,
        height=600,
        labels={'Monto': 'Monto asignado', 'Fondo': 'Fondo'},
        title="Distribución de los fondos por municipio"
    )
    fig.update_traces(marker_color=['#f8a832', '#c58b1f', '#f5d300', '#d20501', '#7b0f09'])  # Colores miel, rojo, verde, amarillo, café
    fig.update_layout(
        plot_bgcolor=background_color,
        paper_bgcolor=background_color,
        font=dict(family="Arial, sans-serif", size=14, color=font_color),
        margin=dict(l=40, r=40, t=40, b=40)
    )
    return fig

# Gráfico de Dispersión: Correlación entre Monto Asignado y Monto Ejercido
@app.callback(
    Output("grafico-correlacion", "figure"),
    [Input("dropdown-ciclo-correlacion", "value")]
)
def actualizar_correlacion(ciclo_seleccionado):
    df_filtrado = df_aportaciones[df_aportaciones['CICLO'] == ciclo_seleccionado]
    fig_dispersion = px.scatter(
        df_filtrado,
        x='MONTO_MODIFICADO',
        y='MONTO_EJERCIDO',
        hover_data={
            'INSTITUCION_EJECUTORA': True,
            'DESC_PARTIDA_GENERICA': True,
            'MONTO_MODIFICADO': True,
            'MONTO_EJERCIDO': True
        },
        labels={
            'MONTO_MODIFICADO': 'Monto Asignado',
            'MONTO_EJERCIDO': 'Monto Ejercido',
            'INSTITUCION_EJECUTORA': 'Institución',
            'DESC_PARTIDA_GENERICA': 'Partida'
        },
        title="Correlación entre Monto Asignado y Monto Ejercido"
    )
    fig_dispersion.update_traces(marker=dict(color=highlight_color, size=10))
    fig_dispersion.update_layout(
        template='plotly_dark',
        font=dict(family="Arial, sans-serif", size=14, color=font_color),
        plot_bgcolor=background_color,
        paper_bgcolor=background_color
    )
    return fig_dispersion

# Gráfico Treemap: Distribución de los Convenios de Descentralización
@app.callback(
    Output('treemap-chart', 'figure'),
    [Input('dropdown-año-treemap', 'value')]
)
def actualizar_treemap(año_seleccionado):
    # Filtrar el DataFrame para obtener solo los datos del año seleccionado
    df_filtrado = df_descentralizacion[df_descentralizacion['AÑO'] == año_seleccionado]
    # Verificar si las columnas necesarias existen
    required_columns = ['RAMO', 'PROGRAMA PRESUPUESTARIO', 'PARTIDA GÉNERICA', 'MONTO']
    if not all(col in df_filtrado.columns for col in required_columns):
        return go.Figure()  # Retornar un gráfico vacío si alguna columna está faltando
    # Eliminar filas con valores nulos en las columnas clave
    df_filtrado = df_filtrado.dropna(subset=required_columns)
    # Generar el gráfico Treemap
    fig_treemap = px.treemap(
        df_filtrado,
        path=[px.Constant("Total"), 'RAMO', 'PROGRAMA PRESUPUESTARIO', 'PARTIDA GÉNERICA'],
        values='MONTO',
        hover_data={'TIPO DE GASTO': True, 'PARTIDA GÉNERICA': True},
        title=f'Distribución de los Convenios de Descentralización - Año {año_seleccionado}',
        color='MONTO',
        color_continuous_scale=['#fba726', '#fca61e', '#d20501', '#bc0301', '#7b0f09']
    )
    fig_treemap.update_layout(
        template='plotly_dark',
        font=dict(family="Arial, sans-serif", size=14, color=font_color),
        plot_bgcolor=background_color,
        paper_bgcolor=background_color,
    )
    return fig_treemap




if __name__ == "__main__":
    app.run_server(debug=True)

